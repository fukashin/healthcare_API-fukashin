name: Trigger auto deployment for aca-sample

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: 
      [ main ]

  # Allow manually trigger 
  workflow_dispatch:      

permissions:
  id-token: write
  contents: read

env:
  AZURE_CONTAINER_REGISTRY: healthcareapi
  CONTAINER_NAME: healthcareapiapp
  CONTAINER_APP_NAME: healthcareapiappnakami
  RESOURCE_GROUP: healthcare_app_fukashin

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to container registry
        id: acrtoken
        uses: azure/CLI@v1
        with:
          inlineScript: |
            accessToken=$(az acr login -n ${{ env.AZURE_CONTAINER_REGISTRY }} --expose-token --query accessToken -o tsv)
            echo ::set-output name=token::$accessToken
      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ steps.acrtoken.outputs.token }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          file: ./Dockerfile
          context: ./

  # 【追加ジョブ】バックエンドとデータベースを起動するジョブ
  start-backend-and-db:
    runs-on: ubuntu-latest
    needs: build  # build ジョブが成功してから実行

    steps:
      # ソースコードを取得
      - name: Checkout to the branch
        uses: actions/checkout@v2

      # docker-compose を使用してバックエンドとデータベースを起動
      - name: Start services with docker-compose
        run: |
          docker compose -f docker-compose.dev.yml up -d
        # 上記コマンドにより、バックエンド (Django) とデータベース (PostgreSQL) のサービスをバックグラウンドで起動します。

      # 実行中のコンテナを確認
      - name: Check running containers
        run: docker ps
        # 起動したコンテナが正常に稼働しているか確認します。

      # Django のテストを実行（任意）
      - name: Run tests (optional)
        run: |
          docker exec django_backend python manage.py test
        # バックエンドが正しく動作しているか、Django のテストスクリプトを実行して確認します。

      # docker-compose を終了
      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.dev.yml down
        # 全てのコンテナを停止してクリーンアップします。

  deploy:
    runs-on: ubuntu-latest
    needs: [build, start-backend-and-db]  # build と start-backend-and-db が成功した場合のみ実行
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update -n ${{ env.CONTAINER_APP_NAME }} -g ${{ env.RESOURCE_GROUP }} --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
